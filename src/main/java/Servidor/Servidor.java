/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Servidor;

import javax.swing.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Sala_706
 */
public class Servidor extends javax.swing.JFrame {
    private final int PORT = 12345;
    private ServerSocket serverSocket;
    private List<PrintWriter> clientes;
    private Map<Socket, String> clientesNombres = new HashMap<>();
    /**
     * Creates new form Servidor asdasd
     */
    public Servidor() {
        initComponents();
        clientes = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mensajesTxt = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("SERVIDOR");

        jButton1.setText("INICIAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        mensajesTxt.setColumns(20);
        mensajesTxt.setRows(5);
        jScrollPane1.setViewportView(mensajesTxt);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(121, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(114, 114, 114))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(45, 45, 45)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        iniciarServidor();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Servidor().setVisible(true);
            }
        });
    }

    private void iniciarServidor() {
        JOptionPane.showMessageDialog(this, "Iniciando servidor");
        new Thread(() -> {
            try {
                InetAddress addr = InetAddress.getLocalHost();
                serverSocket = new ServerSocket(PORT);
                mensajesTxt.append("Servidor TCP en ejecución: " + addr + " , Puerto " + serverSocket.getLocalPort() + "\n");
                jButton1.setEnabled(false);

                while (true) {
                    Socket clientSocket = serverSocket.accept();
                    mensajesTxt.append("Nuevo cliente conectado: " + clientSocket.getInetAddress().getHostAddress() + "\n");
                    PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
                    synchronized (clientes) {
                        clientes.add(out);  // Añade el PrintWriter del cliente a la lista
                    }
                    new Thread(new ClientHandler(clientSocket)).start();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
                mensajesTxt.append("Error en el servidor: " + ex.getMessage() + "\n");
            }
        }).start();
    }
    
    private class ClientHandler implements Runnable {
    private Socket clientSocket;
    private BufferedReader in;
    private PrintWriter out;
    private String nombreCliente;

    public ClientHandler(Socket socket) {
        this.clientSocket = socket;
    }

    @Override
    public void run() {
        try {
            in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            out = new PrintWriter(clientSocket.getOutputStream(), true);

            nombreCliente = in.readLine(); // Leer el nombre del cliente al conectar

            synchronized (clientes) {
                if (!clientes.contains(out)) {
                    clientes.add(out); // Añadir el PrintWriter del cliente actual a la lista de clientes
                }
                clientesNombres.put(clientSocket, nombreCliente); // Añadir el nombre del cliente a la lista
            }

            mensajesTxt.append("Cliente conectado: " + nombreCliente + " (" + clientSocket.getInetAddress().getHostAddress() + ")\n");

            // Enviar la lista actualizada de clientes a todos
            enviarListaClientesActualizada();

            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.startsWith("MSG:")) {
                    // Mensaje dirigido a un cliente específico
                    String[] parts = inputLine.substring(4).split(":", 2);
                    String destinatario = parts[0];
                    String mensaje = parts[1];
                    enviarMensajeADestinatario(destinatario, mensaje);
                } else {
                    String mensajeConNombre = nombreCliente + ": " + inputLine;
                    mensajesTxt.append(mensajeConNombre + "\n");

                    // Enviar el mensaje a todos los clientes conectados
                    synchronized (clientes) {
                        for (PrintWriter writer : clientes) {
                            writer.println(mensajeConNombre); // Enviar el mensaje a todos los clientes
                        }
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (in != null) in.close();
                if (clientSocket != null) clientSocket.close();
                synchronized (clientes) {
                    clientes.remove(out); // Eliminar el PrintWriter del cliente al desconectarse
                }
                synchronized (clientesNombres) {
                    clientesNombres.remove(clientSocket); // Eliminar el nombre del cliente
                }
                mensajesTxt.append("Cliente desconectado: " + nombreCliente + "\n");

                // Enviar la lista actualizada de clientes a todos
                enviarListaClientesActualizada();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void enviarMensajeADestinatario(String destinatario, String mensaje) throws IOException {
        synchronized (clientesNombres) {
            for (Map.Entry<Socket, String> entry : clientesNombres.entrySet()) {
                if (entry.getValue().equals(destinatario)) {
                    PrintWriter destinatarioWriter = new PrintWriter(entry.getKey().getOutputStream(), true);
                    destinatarioWriter.println(mensaje);
                    break;
                }
            }
        }
    }

    private void enviarListaClientesActualizada() {
        StringBuilder listaClientes = new StringBuilder("CLIENTES:");
        synchronized (clientesNombres) {
            for (String nombre : clientesNombres.values()) {
                listaClientes.append(nombre).append(",");
            }
        }
        String lista = listaClientes.toString();

        synchronized (clientes) {
            for (PrintWriter writer : clientes) {
                writer.println(lista);
            }
        }
    }
    }    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea mensajesTxt;
    // End of variables declaration//GEN-END:variables
}
